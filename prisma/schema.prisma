// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bases         Base[]          @relation("UserToBase")
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// Bases and Tables DB
model Base {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserToBase")
  tables    Table[]  @relation("BaseToTable")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id        String   @id @default(cuid())
  name      String
  baseId    String
  base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade, name: "BaseToTable")
  columns   Column[] @relation("TableToColumn")
  cells     Cell[]   @relation("TableToCell")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Column {
  id        String   @id @default(cuid())
  name      String
  type      ColumnType
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade, name: "TableToColumn")
  cells     Cell[]   @relation("ColumnToCell")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cell {
  id        String   @id @default(cuid())
  value     String
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade, name: "TableToCell")
  columnId  String
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade, name: "ColumnToCell")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ColumnType {
  TEXT
  NUMBER
}